how to make a rails app

# start

@terminal = rails new #name --database=postgresql
  # this is create a file and folder & git directory & dependent ruby gems

ex

 rails new bleater --database=postgresql
## rails by default makes the id column
 - bleats
    - id
    - body
    - author_id => reference users.id

 - user
  - id
  - email
  - location_id => reference locations.id

 - locations
  - id
  - name


How to make data base # everything in the note will fall under db files

@terminal = bundle exec rails db:create

then

@terminal = rails generate migration #name
 ex rails generate migration #creat_bleats

 # this create a migrate directory time stamp
## migration needs to be filled out

ex classCreateBleats < ActiveRecord::Migration[5.2]
  def change
    create_table :bleats do |t|
     t.string :body #body is the column in the bleats table
     t.timestamps   # conventional to throw it on the table that we create
                    # shows when the elements were created
    end
  end
end


then the migration needs to be re run  to create the tables


@ terminal
  - bundle exec rail db:migrate  ## this command runs any migration that hasn't been run yet
    #this will update database inside the file


## how to load current status of the schema
@ terminal = bundle exec rails db:schema:load

ex creating second table for user

@ terminal
  -bundle exec rails g migration create_users

ex creating third table for locatiosn
 @ terminal
  - bundle exec rails g migration create_locations

## how to update migrations
#terminal
  be rails g migration add_author_id_to_bleats

   add colums :column name, :column name
# migration is about changing structure of the tables



### creating models
  # inside the model directory
    ex. create users.rb

   users < ApplicationRecord
    #Application Record is a file that inherits from ActiveRecordBase which
    # is where all the boiler plate functionality comes from
    # self.abstract_class = true says it's not a model



#going into rails console

@ terminal = be rails c (bundle exec rails console)

# table name .all connects the table to file name
 tommy =Tablename.new


how to go to app database

@terminal - be rails dbconsole (bundle exec rails dbconsole)

# connecting different tables
$$$$$ include annotate gem in gem files
$$$$$ include pry-rails gem in gem files to use pry instead

in  ex file do,

class Bleat < ApplicationRecord
  belons_to: :author,
    class_name: "User",
    primary_key: :id,
    foreign_key: :author_id
end



# conneting the opposite side

class User < ApplicationRecord
  has_many :authored_bleats,  #has_many is a method call that it will have many of the following hash
    class_name: "Bleat",
    primary_key: :id,
    foreign_key: :author_id


##### USING validate
  #validations run so that data is valid before it gets inputed into database
syntax =
  ex.
  class Bleat < ApplicationRecord
    validate :ensure_bleats_arent_long

    belong_to :author,
    class_name "User"


  def  ensure_bleats_arent_long
  self
    if self.body.length > 150
      self.errors[:body] << "is too long (max is 150 chars)"
    end
  end

end


ensuring that some elements aren't empty

validates #columnname, presence: true
validates #columname, length: {maximum: 150}
